---
name: Deploy Pre-Release Artifacts

on:
  workflow_call:
   secrets:
      pypi-token:
        required: true

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHON_VERSION: '3.10'
  OWNER: eclipse-volttron
  POETRY_VERSION: '2.1.1'

jobs:

  deploy-pre-release:
    runs-on: ubuntu-22.04
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 This will publish changes in develop branch of repository ${{ github.repository }}."

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: develop

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # Install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          if poetry show --only=dev >/dev/null 2>&1; then
            echo "Dev group exists"
            # Use --without dev
            poetry install --no-interaction --no-root --without dev
          else
            echo "No dev group found"
            # Use regular install
            poetry install --no-interaction --no-root
          fi


      #----------------------------------------------
      # Install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: |
          if poetry show --only=dev >/dev/null 2>&1; then
            echo "Dev group exists"
            # Use --without dev
            poetry install --no-interaction --without dev
          else
            echo "No dev group found"
            # Use regular install
            poetry install --no-interaction
          fi
          # poetry install --no-interaction --without dev

      # ----------------------------------------------
      # Get the latest release tag
      # ----------------------------------------------
      - name: Get latest release tag
        id: get_latest_release
        run: |
          git fetch --tags
          # Check if any tags exist
          if git describe --tags --abbrev=0 2>/dev/null; then
            latest_tag=$(git describe --tags --abbrev=0)
            echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
            echo "has_previous_release=true" >> $GITHUB_ENV
            echo "Latest tag found: $latest_tag"
          else
            echo "No previous releases found"
            echo "has_previous_release=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_ENV: ${{ secrets.GITHUB_ENV }}

      # ----------------------------------------------
      # Check for changes excluding .md and .rst files
      # ----------------------------------------------
      - name: Check for non-documentation changes
        id: check_changes
        run: |
          if [[ "${{ env.has_previous_release }}" == "true" ]]; then
            latest_tag="${{ env.latest_tag }}"
            echo "Comparing changes since tag: $latest_tag"

            # Diff excluding documentation files
            changes=$(git diff --name-only $latest_tag HEAD | grep -vE '(\.md|\.rst)$' || true)

            # Log what was found by diff
            echo "Detected changes: $changes"

            if [[ -z "$changes" ]]; then
              echo "No code changes detected. Skipping release."
              echo "no_changes=true" >> $GITHUB_ENV
            else
              echo "Non-documentation changes detected."
              echo "no_changes=false" >> $GITHUB_ENV
            fi
          else
            # No previous release, so consider all non-documentation files as changes
            echo "No previous release found. Checking for non-documentation files..."

            # List all tracked files excluding documentation
            changes=$(git ls-files | grep -vE '(\.md|\.rst)$' || true)

            if [[ -z "$changes" ]]; then
              echo "No non-documentation files found. Skipping release."
              echo "no_changes=true" >> $GITHUB_ENV
            else
              echo "Non-documentation files detected. Will create first release."
              echo "no_changes=false" >> $GITHUB_ENV
            fi
          fi
        env:
          GITHUB_ENV: ${{ secrets.GITHUB_ENV }}

      # ----------------------------------------------
      # Bump version and update pyproject.toml
      # ----------------------------------------------
      - name: bump pyproject.toml version
        if: env.no_changes == 'false'
        run: |
            current_version=$(poetry version --short)
            echo "Current version: $current_version"

            if [[ "${{ env.has_previous_release }}" == "true" ]]; then
              # Previous release exists, bump the version
              echo "Bumping version from $current_version"
              poetry version prerelease --no-interaction
              NEW_TAG=v$(poetry version --short)
            else
              # No previous release, use current version as-is
              echo "No previous release found. Using current version: $current_version"
              NEW_TAG=v$current_version
            fi

            echo "NEW_TAG=$(echo ${NEW_TAG})" >> $GITHUB_ENV
            echo "New tag will be: ${NEW_TAG}"
            echo "source branch is ${{ github.ref_name }}"

      # ----------------------------------------------
      # Auto commit toml file (only if version was bumped)
      # ----------------------------------------------
      - uses: stefanzweifel/git-auto-commit-action@v5
        if: env.no_changes == 'false' && env.has_previous_release == 'true'
        with:
          commit_message: bumped pre-release version to ${{ env.NEW_TAG }}
          branch: develop

      #---------------------------------------------------------------
      # Create build artifacts to be included as part of release
      #---------------------------------------------------------------
      - name: Create build artifacts
        if: env.no_changes == 'false'
        run: |
          poetry build -vvv

      # ----------------------------------------------
      # Create a release tag
      # ----------------------------------------------
      - name: Create Release Tag
        if: env.no_changes == 'false'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.gz,dist/*.whl"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          commit: develop
          prerelease: true
          tag: ${{ env.NEW_TAG }}

      - name: Publish pre-release to pypi
        if: env.no_changes == 'false'
        run: |
          poetry config pypi-token.pypi ${{ secrets.pypi-token }}
          poetry publish
