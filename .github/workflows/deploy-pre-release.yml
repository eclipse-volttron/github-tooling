---
name: Deploy Pre-Release Artifacts

on:
  workflow_call:
   secrets:
      pypi-token:
        required: true

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHON_VERSION: '3.10'
  OWNER: eclipse-volttron
  POETRY_VERSION: '2.1.1'

jobs:

  deploy-pre-release:
    runs-on: ubuntu-22.04
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: develop

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # Install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --without dev

      #----------------------------------------------
      # Install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: |
          poetry install --no-interaction --without dev

      # ----------------------------------------------
      # Get the latest release tag
      # ----------------------------------------------
      - name: Get latest release tag
        id: get_latest_release
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0)
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
        env:
          GITHUB_ENV: ${{ secrets.GITHUB_ENV }}
          
      # ----------------------------------------------
      # Check for changes excluding .md and .rst files
      # ----------------------------------------------
      - name: Check for non-documentation changes
        id: check_changes
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0)
          echo "Latest tag found: $latest_tag"

          # Diff excluding documentation files
          changes=$(git diff --name-only $latest_tag HEAD | grep -vE '(\.md|\.rst)$' || true)

          # Log what was found by diff
          echo "Detected changes: $changes"

          if [[ -z "$changes" ]]; then
            echo "No code changes detected. Skipping release."
            echo "no_changes=true" >> $GITHUB_ENV
          else
            echo "Non-documentation changes detected."
            echo "no_changes=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_ENV: ${{ secrets.GITHUB_ENV }}

      # ----------------------------------------------
      # Bump version and update pyproject.toml
      # ----------------------------------------------
      - name: bump pyproject.toml version
        if: env.no_changes == 'false'
        run: |
            current_version=$(poetry version --short)
            echo $current_version
            poetry version prerelease --no-interaction
            NEW_TAG=v$(poetry version --short)
            echo "NEW_TAG=$(echo ${NEW_TAG})" >> $GITHUB_ENV
            echo "source branch is ${{ github.ref_name }}"

      # ----------------------------------------------
      # Auto commit toml file
      # ----------------------------------------------
      - uses: stefanzweifel/git-auto-commit-action@v5
        if: env.no_changes == 'false'
        with:
          commit_message: bumped pre-release version to ${{ env.NEW_TAG }}
          branch: ${{ github.ref_name }}

      #---------------------------------------------------------------
      # Create build artifacts to be included as part of release
      #---------------------------------------------------------------
      - name: Create build artifacts
        if: env.no_changes == 'false'
        run: |
          poetry build -vvv

      # ----------------------------------------------
      # Create a release tag
      # ----------------------------------------------
      - name: Create Release Tag
        if: env.no_changes == 'false'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.gz,dist/*.whl"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          commit: ${{ github.ref }}
          prerelease: true
          tag: ${{ env.NEW_TAG }}

      - name: Publish pre-release to pypi
        if: env.no_changes == 'false'
        run: |
          poetry config pypi-token.pypi ${{ secrets.pypi-token }}
          poetry publish
